// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: buf/vanguard/annotations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Buf_Vanguard_HttpOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Assigns an HTTP method and path to an RPC.
  ///
  /// The mapping supports URL path templates which are able to
  /// reference any primitive (string, int, etc.) fields in the request
  /// message.
  ///
  /// For example:
  ///
  /// rpc GetFoo(GetFooRequest) returns (GetFooResponse) {
  ///    option (buf.vanguard.http) = {
  ///        get: "/v1/foo/{foo_id}"
  ///    };
  /// }
  ///
  /// message GetFooRequest {
  ///     string foo_id = 1; // Mapped to `foo_id` in the RPC path
  /// }
  public var method: Buf_Vanguard_HttpOptions.OneOf_Method? = nil

  /// Maps to HTTP GET.
  public var get: String {
    get {
      if case .get(let v)? = method {return v}
      return String()
    }
    set {method = .get(newValue)}
  }

  /// Maps to HTTP PUT.
  public var put: String {
    get {
      if case .put(let v)? = method {return v}
      return String()
    }
    set {method = .put(newValue)}
  }

  /// Maps to HTTP POST.
  public var post: String {
    get {
      if case .post(let v)? = method {return v}
      return String()
    }
    set {method = .post(newValue)}
  }

  /// Maps to HTTP DELETE.
  public var delete: String {
    get {
      if case .delete(let v)? = method {return v}
      return String()
    }
    set {method = .delete(newValue)}
  }

  /// Maps to HTTP PATCH.
  public var patch: String {
    get {
      if case .patch(let v)? = method {return v}
      return String()
    }
    set {method = .patch(newValue)}
  }

  /// A custom HTTP method not listed above.
  public var customMethod: Buf_Vanguard_HttpOptions.CustomMethod {
    get {
      if case .customMethod(let v)? = method {return v}
      return Buf_Vanguard_HttpOptions.CustomMethod()
    }
    set {method = .customMethod(newValue)}
  }

  /// If true, data is sent as a JSON body.
  /// If false, query parameters are used.
  public var bodyJson: Bool = false

  /// The strategy to use for encoding repeated/array fields as
  /// query parameters.
  public var arrayEncoding: Buf_Vanguard_HttpOptions.ArrayEncodingStrategy = .repeated

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Assigns an HTTP method and path to an RPC.
  ///
  /// The mapping supports URL path templates which are able to
  /// reference any primitive (string, int, etc.) fields in the request
  /// message.
  ///
  /// For example:
  ///
  /// rpc GetFoo(GetFooRequest) returns (GetFooResponse) {
  ///    option (buf.vanguard.http) = {
  ///        get: "/v1/foo/{foo_id}"
  ///    };
  /// }
  ///
  /// message GetFooRequest {
  ///     string foo_id = 1; // Mapped to `foo_id` in the RPC path
  /// }
  public enum OneOf_Method: Equatable {
    /// Maps to HTTP GET.
    case get(String)
    /// Maps to HTTP PUT.
    case put(String)
    /// Maps to HTTP POST.
    case post(String)
    /// Maps to HTTP DELETE.
    case delete(String)
    /// Maps to HTTP PATCH.
    case patch(String)
    /// A custom HTTP method not listed above.
    case customMethod(Buf_Vanguard_HttpOptions.CustomMethod)

  #if !swift(>=4.1)
    public static func ==(lhs: Buf_Vanguard_HttpOptions.OneOf_Method, rhs: Buf_Vanguard_HttpOptions.OneOf_Method) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.get, .get): return {
        guard case .get(let l) = lhs, case .get(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.put, .put): return {
        guard case .put(let l) = lhs, case .put(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.post, .post): return {
        guard case .post(let l) = lhs, case .post(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.delete, .delete): return {
        guard case .delete(let l) = lhs, case .delete(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.patch, .patch): return {
        guard case .patch(let l) = lhs, case .patch(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.customMethod, .customMethod): return {
        guard case .customMethod(let l) = lhs, case .customMethod(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum ArrayEncodingStrategy: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Encodes repeated fields as repeated query parameters. Example:
    /// `// ?foo=first&foo=second&foo=third&other=abc`
    case repeated // = 0

    /// Encodes repeated fields by separating values with commas. Example:
    /// `?foo=first,second,third&other=abc`
    case commaSeparated // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .repeated
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .repeated
      case 1: self = .commaSeparated
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .repeated: return 0
      case .commaSeparated: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A custom HTTP method (e.g., `OPTIONS`).
  public struct CustomMethod {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name of this custom HTTP method.
    public var kind: String = String()

    /// The path to use with this custom method.
    public var path: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Buf_Vanguard_HttpOptions.ArrayEncodingStrategy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Buf_Vanguard_HttpOptions.ArrayEncodingStrategy] = [
    .repeated,
    .commaSeparated,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Buf_Vanguard_HttpOptions: @unchecked Sendable {}
extension Buf_Vanguard_HttpOptions.OneOf_Method: @unchecked Sendable {}
extension Buf_Vanguard_HttpOptions.ArrayEncodingStrategy: @unchecked Sendable {}
extension Buf_Vanguard_HttpOptions.CustomMethod: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in annotations.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MethodOptions {

  public var Buf_Vanguard_http: Buf_Vanguard_HttpOptions {
    get {return getExtensionValue(ext: Buf_Vanguard_Extensions_http) ?? Buf_Vanguard_HttpOptions()}
    set {setExtensionValue(ext: Buf_Vanguard_Extensions_http, value: newValue)}
  }
  /// Returns true if extension `Buf_Vanguard_Extensions_http`
  /// has been explicitly set.
  public var hasBuf_Vanguard_http: Bool {
    return hasExtensionValue(ext: Buf_Vanguard_Extensions_http)
  }
  /// Clears the value of extension `Buf_Vanguard_Extensions_http`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearBuf_Vanguard_http() {
    clearExtensionValue(ext: Buf_Vanguard_Extensions_http)
  }

}

// MARK: - File's ExtensionMap: Buf_Vanguard_Annotations_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Buf_Vanguard_Annotations_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Buf_Vanguard_Extensions_http
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

public let Buf_Vanguard_Extensions_http = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Buf_Vanguard_HttpOptions>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
  _protobuf_fieldNumber: 65295728,
  fieldName: "buf.vanguard.http"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "buf.vanguard"

extension Buf_Vanguard_HttpOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HttpOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "get"),
    2: .same(proto: "put"),
    3: .same(proto: "post"),
    4: .same(proto: "delete"),
    5: .same(proto: "patch"),
    6: .standard(proto: "custom_method"),
    7: .standard(proto: "body_json"),
    8: .standard(proto: "array_encoding"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.method != nil {try decoder.handleConflictingOneOf()}
          self.method = .get(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.method != nil {try decoder.handleConflictingOneOf()}
          self.method = .put(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.method != nil {try decoder.handleConflictingOneOf()}
          self.method = .post(v)
        }
      }()
      case 4: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.method != nil {try decoder.handleConflictingOneOf()}
          self.method = .delete(v)
        }
      }()
      case 5: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.method != nil {try decoder.handleConflictingOneOf()}
          self.method = .patch(v)
        }
      }()
      case 6: try {
        var v: Buf_Vanguard_HttpOptions.CustomMethod?
        var hadOneofValue = false
        if let current = self.method {
          hadOneofValue = true
          if case .customMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.method = .customMethod(v)
        }
      }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.bodyJson) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.arrayEncoding) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.method {
    case .get?: try {
      guard case .get(let v)? = self.method else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .put?: try {
      guard case .put(let v)? = self.method else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .post?: try {
      guard case .post(let v)? = self.method else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case .delete?: try {
      guard case .delete(let v)? = self.method else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .patch?: try {
      guard case .patch(let v)? = self.method else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case .customMethod?: try {
      guard case .customMethod(let v)? = self.method else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    if self.bodyJson != false {
      try visitor.visitSingularBoolField(value: self.bodyJson, fieldNumber: 7)
    }
    if self.arrayEncoding != .repeated {
      try visitor.visitSingularEnumField(value: self.arrayEncoding, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Buf_Vanguard_HttpOptions, rhs: Buf_Vanguard_HttpOptions) -> Bool {
    if lhs.method != rhs.method {return false}
    if lhs.bodyJson != rhs.bodyJson {return false}
    if lhs.arrayEncoding != rhs.arrayEncoding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Buf_Vanguard_HttpOptions.ArrayEncodingStrategy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REPEATED"),
    1: .same(proto: "COMMA_SEPARATED"),
  ]
}

extension Buf_Vanguard_HttpOptions.CustomMethod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Buf_Vanguard_HttpOptions.protoMessageName + ".CustomMethod"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.kind) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kind.isEmpty {
      try visitor.visitSingularStringField(value: self.kind, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Buf_Vanguard_HttpOptions.CustomMethod, rhs: Buf_Vanguard_HttpOptions.CustomMethod) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
